{"version":3,"sources":["logo.svg","components/ShoppingItem/ShoppingItem.js","components/ShoppingList/ShoppingList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ShoppingItem","props","useState","item","checked","setCheck","className","designation","type","onChange","e","target","check","onClick","deleteItem","ShoppingList","form","useRef","value","setValue","initiaList","localStorage","getItem","JSON","parse","list","setList","useEffect","length","setItem","stringify","handleCheck","element","map","id","filter","data-testid","ref","onSubmit","preventDefault","test","concat","uuid","placeholder","key","onCheck","Component","App","href","rel","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,kC,oPCiC5BC,G,MA9BM,SAAAC,GAAU,IAAD,EACEC,mBAASD,EAAME,KAAKC,SADtB,mBACnBA,EADmB,KACVC,EADU,KAG1B,OACI,wBAAIC,UAAU,iBACV,+BACKL,EAAME,KAAKI,YACZ,2BACIC,KAAK,WACLC,SAAU,SAACC,GAEPL,EAASK,EAAEC,OAAOC,QAGtBR,QAASA,IAEb,0BAAME,UAAU,eAEpB,4BACIA,UAAU,gBACVO,QAAS,kBACLZ,EAAMa,WAAWb,EAAME,QAG3B,0BAAMG,UAAU,eAAhB,SCoEDS,G,MA1FM,WACjB,IAAMC,EAAOC,iBAAO,MADG,EAEGf,mBAAS,IAFZ,mBAEhBgB,EAFgB,KAETC,EAFS,KAGjBC,EAAaC,aAAaC,QAAQ,QAAUC,KAAKC,MAAMH,aAAaC,QAAQ,SAAW,GAHtE,EAICpB,mBAASkB,GAJV,mBAIhBK,EAJgB,KAIVC,EAJU,KAMvBC,qBAAU,WACFF,EAAKG,QACLP,aAAaQ,QAAQ,OAAQN,KAAKO,UAAUL,MAEjD,CAACA,IAEJ,IAMMM,EAAc,SAAAC,GAChBN,EACID,EAAKQ,KAAI,SAAA9B,GAIL,OAHI6B,EAAQE,KAAO/B,EAAK+B,KACpB/B,EAAKC,SAAW4B,EAAQ5B,SAErBD,OAKbW,EAAa,SAAAkB,GACfN,EACID,EAAKU,QAAO,SAAAzB,GACR,OAAOA,EAAEwB,IAAMF,EAAQE,QAKnC,OACI,yBAAK5B,UAAU,0BAA0B8B,cAAY,iBACjD,0BACIC,IAAKrB,EACLsB,SAAU,SAAA5B,GACNA,EAAE6B,iBA7BV,KAAKC,KAAKtB,IACVQ,EAAQD,EAAKgB,OAAO,CAAC,CAAEP,GAAIQ,MAAQnC,YAAaW,MA8BxCC,EAAS,MAGb,4BAAQX,KAAK,SAASU,MAAM,QACxB,0BAAMZ,UAAU,cAEpB,2BACIE,KAAK,OACLF,UAAU,cACVY,MAAOA,EACPT,SAAU,SAAAC,GAAC,OAAIS,EAAST,EAAEC,OAAOO,QACjCyB,YAAY,qBAGpB,yBAAKrC,UAAU,iBACX,wBAAIA,UAAU,QACTmB,GAAQA,EAAKQ,KACV,SAAA9B,GAAI,OACCA,EAAKC,SACF,kBAAC,EAAD,CACID,KAAMA,EACNyC,IAAKzC,EAAK+B,GACVpB,WAAYA,EACZ+B,QAASd,QAK7B,wBAAIzB,UAAU,gBACTmB,GAAQA,EAAKQ,KACV,SAAA9B,GAAI,OACAA,EAAKC,SACD,kBAAC,EAAD,CACID,KAAMA,EACNyC,IAAKzC,EAAK+B,GACVW,QAASd,EACTjB,WAAYA,Y,sBCjF7BgC,YAuBJC,MApBf,WACI,OACI,yBAAKzC,UAAU,OACX,4BAAQA,UAAU,cACd,uBACIA,UAAU,WACV0C,KAAK,gCACLrC,OAAO,SACPsC,IAAI,uBAEJ,yBAAKC,IAAKC,IAAM7C,UAAU,WAAW8C,IAAI,UAE7C,gCAGJ,kBAAC,EAAD,QCVQC,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZJC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.98fea5e8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d98a6a66.svg\";","import React, { useState } from 'react';\nimport './ShoppingItem.css';\n\nconst ShoppingItem = props => {\n    const [checked, setCheck] = useState(props.item.checked);\n\n    return (\n        <li className=\"shopping-item\">\n            <label>\n                {props.item.designation}\n                <input\n                    type=\"checkbox\"\n                    onChange={(e) => {\n                        debugger;\n                        setCheck(e.target.check)\n                        //props.onCheck(props.item)\n                    }}\n                    checked={checked}\n                />\n                <span className=\"checkmark\"></span>\n            </label>\n            <button\n                className=\"remove-button\"\n                onClick={() =>\n                    props.deleteItem(props.item)\n                }\n            >\n                <span className=\"delete-icon\"> </span>\n            </button>\n        </li>\n    )\n}\n\nexport default ShoppingItem\n","import React, { useState, useRef, useEffect } from 'react';\nimport uuid from 'uuid/v4';\nimport ShoppingItem from '../ShoppingItem/ShoppingItem'\nimport \"./ShoppingList.css\"\n\nconst ShoppingList = () => {\n    const form = useRef(null)\n    const [value, setValue] = useState('');\n    const initiaList = localStorage.getItem('list') ? JSON.parse(localStorage.getItem('list')) : [];\n    const [list, setList] = useState(initiaList);\n\n    useEffect(() => {\n        if (list.length) {\n            localStorage.setItem('list', JSON.stringify(list));\n        }\n    }, [list])\n\n    const handleSubmit = () => {\n        if (/\\S/.test(value)) {\n            setList(list.concat([{ id: uuid(), designation: value }]));\n        }\n    }\n\n    const handleCheck = element => {\n        setList(\n            list.map(item => {\n                if (element.id === item.id) {\n                    item.checked = !element.checked\n                }\n                return item\n            })\n        )\n    }\n\n    const deleteItem = element => {\n        setList(\n            list.filter(e => {\n                return e.id != element.id\n            })\n        )\n    }\n\n    return (\n        <div className=\"shopping-list-container\" data-testid=\"shopping-list\">\n            <form\n                ref={form}\n                onSubmit={e => {\n                    e.preventDefault()\n                    handleSubmit(value)\n                    setValue('')\n                }}\n            >\n                <button type=\"submit\" value=\"form\">\n                    <span className=\"add-icon\"></span>\n                </button>\n                <input\n                    type=\"text\"\n                    className=\"add-element\"\n                    value={value}\n                    onChange={e => setValue(e.target.value)}\n                    placeholder=\"add an item ...\"\n                />\n            </form>\n            <div className=\"shopping-list\">\n                <ul className=\"list\">\n                    {list && list.map(\n                        item =>\n                            !item.checked && (\n                                <ShoppingItem\n                                    item={item}\n                                    key={item.id}\n                                    deleteItem={deleteItem}\n                                    onCheck={handleCheck}\n                                />\n                            )\n                    )}\n                </ul>\n                <ul className=\"list-checked\">\n                    {list && list.map(\n                        item =>\n                            item.checked && (\n                                <ShoppingItem\n                                    item={item}\n                                    key={item.id}\n                                    onCheck={handleCheck}\n                                    deleteItem={deleteItem}\n                                />\n                            )\n                    )}\n                </ul>\n            </div>\n        </div>\n    )\n}\n\nexport default ShoppingList\n","import React, { Component } from 'react';\nimport ShoppingList from './components/ShoppingList/ShoppingList';\nimport logo from './logo.svg';\nimport './App.css';\nclass comp extends Component {\n\n}\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <a\n                    className=\"App-link\"\n                    href=\"https://www.equalexperts.com/\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                </a>\n                <comp></comp>\n\n            </header>\n            <ShoppingList />\n        </div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null &&\n          contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}